@page "/new"
@using DatabaseAccess.Data;
@using DatabaseAccess.Entities;
@using DatabaseAccess.Enums;
@using Microsoft.AspNetCore.Identity;
@inject NavigationManager NavigationManager
@inject HttpContextAccessor HttpContextAccessor
@inject UserManager<ApplicationUser> UserManager
@inject JobPostService JobPostService
<style>
    .color_btn {
        color: #ffffff;
        background-color: #6fa8aa;
        border-color: #5f9ea0;
    }

    .text_field_padding {
        padding: 1px 1px 10px;
    }

</style>

<PageTitle>New</PageTitle>

<Field>
    <Button Color="Color.Primary" onclick="@(() => {NavigationManager.NavigateTo("/jobs");})">Back</Button>
</Field>

<h2>New Job Post</h2>

<Field>
    <FieldLabel>
        Job Title
    </FieldLabel>
    <TextEdit Placeholder="Job Title" @bind-Text="jobTitleText" />
</Field>

<Field>
    <FieldLabel>
        Creation Date
    </FieldLabel>
    <DateEdit TValue="DateTime" @bind-Date="currentTime" Disabled />
</Field>

<Field>
    <FieldLabel>
        Expiration Date
    </FieldLabel>
    <DateEdit TValue="DateTime" @bind-Date="expirationTime"/>
</Field>

<Field>
    <FieldLabel>
        Job Status
    </FieldLabel>
    <RadioGroup TValue="PostStatusType" Name="status" @bind-CheckedValue="status">
        <Radio Value="@(PostStatusType.Open)">Open</Radio>
        <Radio Value="@(PostStatusType.Expired)">Expired</Radio>
    </RadioGroup>
</Field>

<Field>
    <FieldLabel>
        Job Type
    </FieldLabel>
    <RadioGroup TValue="JobType" Name="jobType" @bind-CheckedValue="jobType">
        <Radio Value="@(JobType.Onsite)">Onsite</Radio>
        <Radio Value="@(JobType.Remote)">Remote</Radio>
        <Radio Value="@(JobType.Hybrid)">Hybrid</Radio>
    </RadioGroup>
</Field>

<Field>
    <FieldLabel>
        Location
    </FieldLabel>
    <TextEdit Placeholder="Location" @bind-Text="locationText" />
</Field>

<Field>
    <FieldLabel>
        Job Description
    </FieldLabel>
    <MemoEdit Rows="5" @bind-Text="jobDescriptionText"/>
</Field>

<Field>
    <FieldLabel>
        Salary (Hourly)
    </FieldLabel>
    <NumericEdit TValue="decimal" @bind-Value="salaryValue" />
</Field>

<Field>
    <Button class="color_btn" Clicked="SaveData">Save</Button>
</Field>


@code {
    JobPost newJobPost = new JobPost();
    ApplicationUser currentUser;

    DateTime currentTime { get; set; } = DateTime.Now;
    DateTime expirationTime { get; set; } = DateTime.Now;
    PostStatusType status { get; set; } = PostStatusType.Open;
    JobType jobType { get; set; } = JobType.Onsite;
    string locationText { get; set; } = string.Empty;
    string jobTitleText { get; set; } = string.Empty;
    string jobDescriptionText { get; set; } = string.Empty;
    decimal salaryValue { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        GetUser();
    }

    public async void GetUser()
    {
        currentUser = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);    
    }

    public void SaveData()
    {
        newJobPost.CreationDate = currentTime;
        newJobPost.ExpirationDate = expirationTime;
        newJobPost.Status = status;
        newJobPost.JobType = jobType;
        newJobPost.Location = locationText;
        newJobPost.JobTitle = jobTitleText;
        newJobPost.Description = jobDescriptionText;
        newJobPost.Salary = salaryValue;
        newJobPost.User = currentUser;
        newJobPost.JobApplications = new List<JobApplication>();

        Console.WriteLine(JobPostService.CreateJob(newJobPost));
        NavigationManager.NavigateTo($"/job/{newJobPost.Id}");
    }
}
