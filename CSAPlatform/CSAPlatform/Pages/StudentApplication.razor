@page "/job/{currentId}/apply"
@page "/job/{currentId}/application/{applicationId}"
@using BlazorInputFile;
@using DatabaseAccess.Data;
@using DatabaseAccess.Entities;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<ApplicationUser> UserManager
@inject HttpContextAccessor HttpContextAccessor
@inject ApplicationUserService UserService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

@if (!isLoaded)
{
    <p> Loading...</p>    
}
else
{
    @if (applicationId == null)
    {
            <PageTitle>Apply for Job #@currentId</PageTitle>
            <h2>Apply for Job #@currentId</h2>
    }
    else
    {
            <PageTitle>Application #@applicationId for job #@currentId</PageTitle>
            <h2>Application #@applicationId for job #@currentId</h2>
    }

    <BlazorInputFile.InputFile hidden="@isUploaded" OnChange="@(async e => await OnFileUpload(e, currentUser.Id))" />
    <p>@resumeStatus</p>
    @if (currentUser.Attachment != null)
    {
            <Button Color="Color.Primary" Clicked="@(async e => await DownloadPdf(currentUser.Id))">Download File</Button>
            <Button Color="Color.Danger" Clicked="@(async e => await DeletePdf(currentUser.Id))">Delete</Button>
    }

    <br />

    <BlazorInputFile.InputFile />
    <p>@coverLetterStatus</p>

    <br />
    @if (applicationId == null)
    {
        <Button Color="Color.Success" Clicked="@(() => { NavigationManager.NavigateTo($"/job/{currentId}/application/1"); })"> Submit</Button>
    }
}

@code {
    [Parameter]
    public string? currentId { get; set; }
    [Parameter]
    public string? applicationId { get; set; }
    ApplicationUser currentUser;
    IFileListEntry file;
    string resumeStatus = "Upload Resume Here";
    string coverLetterStatus = "Upload Cover Letter Here (Optional)";
    bool isUploaded = false;
    bool isLoaded = false;
    JobApplication aNewJobApplication = new JobApplication();

    protected override async Task OnInitializedAsync()
    {
        await GetUser();
        if (currentUser.Attachment != null)
        {
            isUploaded = true;
            resumeStatus = "A file is currently associated with this account. Please download to view.";
        }
        isLoaded = true;
    }

    public async Task GetUser()
    {
        currentUser = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);
    }

    public async Task OnFileUpload(IFileListEntry[] file, string userId)
    {
        var attachment = await FileSender(file.FirstOrDefault());
        UserService.UploadPdf(userId, attachment);
        currentUser = UserService.GetUserById(currentUser.Id);

        resumeStatus = $"Uploaded file: {file.FirstOrDefault().Name}";
        isUploaded = true;
    }

    public async Task<byte[]> FileSender(IFileListEntry file)
    {
        using (var ms = new MemoryStream())
        {
            await file.Data.CopyToAsync(ms);
            return ms.ToArray();
        }
    }

    public async Task DeletePdf(string userId)
    {
        UserService.DeletePdf(userId);
        currentUser = UserService.GetUserById(currentUser.Id);
        resumeStatus = "File deleted successfully";
        isUploaded = false;
    }

    public async Task DownloadPdf(string userId)
    {
        var user = UserService.GetUserById(userId);

        await FileUtil.SaveAs(JsRuntime, "uploaded-file.pdf", user.Attachment);

        currentUser = UserService.GetUserById(currentUser.Id);
    }
}
