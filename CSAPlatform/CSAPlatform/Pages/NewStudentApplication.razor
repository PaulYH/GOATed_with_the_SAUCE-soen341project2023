@page "/job/{currentId}/apply"

@using BlazorInputFile;
@using DatabaseAccess.Data;
@using DatabaseAccess.Entities;
@using DatabaseAccess.Enums
@using Microsoft.AspNetCore.Identity;
@inject UserManager<ApplicationUser> UserManager
@inject HttpContextAccessor HttpContextAccessor
@inject ApplicationUserService UserService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject JobPostService JobPostService
@inject JobApplicationService JobApplicationService


@if (!isLoaded)
{
    <p>@loadingStatus</p>
}

else if (hasApplied)
{
    <p>Position has previously been applied</p>
    <Button Color="Color.Primary" Clicked="@(() => {NavigationManager.NavigateTo($"/job/{currentId}/application/{appIDExist}");})" >View Application</Button>
}

else
{
    <PageTitle>Apply for Job #@currentId</PageTitle>
    <h2>Apply for Job #@currentId</h2>

    <BlazorInputFile.InputFile hidden="@(isResumeUploaded)" OnChange="@(async e => await OnFileUpload(e, currentUser.Id))" />
    <p>@resumeStatus</p>
    @if (currentUser.Attachment != null)
    {
        <Button Color="Color.Primary" Clicked="@(async e => await DownloadPdf(currentUser.Id))">Download File</Button>
        <Button Clicked="@(async e => await DeletePdf(currentUser.Id))">Delete</Button>
    }

    <BlazorInputFile.InputFile hidden="@(isCoverLetterUploaded)" OnChange="@(async e => await OnFileUpload(e))" />
    <p>@coverLetterStatus</p>
    @if(coverLetterAttachments != null)
    {
        <Button Color="Color.Primary" Clicked="@(async e => await DownloadPdf())">Download File</Button>
        <Button Clicked="@(async e => await DeletePdf())">Delete</Button>
    }
    @if (isResumeUploaded)
    {
        <Button Color="Color.Success" Clicked="SaveData">Submit</Button>
    }
    else
    {
        <p>Please upload resume to apply.</p>
    }
}

@code {
    [Parameter]
    public string? currentId { get; set; }

    ApplicationUser currentUser;
    JobPost currentJobPost;
    IFileListEntry file;
    byte[]? coverLetterAttachments = null;
    string loadingStatus = "Loading...";
    string resumeStatus = "Upload Resume Here";
    string coverLetterStatus = "Upload Cover Letter Here (Optional)";
    bool isLoaded = false;
    bool isResumeUploaded = false;
    bool isCoverLetterUploaded = false;
    bool hasApplied = false;
    int appIDExist  { get; set; }
    JobApplication newJobApplication = new JobApplication();



    protected override async Task OnInitializedAsync()
    {
        await GetUser();
        await GetJobPost();
        await CheckIfApplied();

        if (currentUser.Attachment != null)
        {
            isResumeUploaded = true;
            resumeStatus = "A file is currently associated with this account. Please download to view.";
        }
        isLoaded = true;
    }

    public async Task GetUser()
    {
        currentUser = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);
    }

    public async Task GetJobPost()
    {
        currentJobPost = await JobPostService.GetJobPostById(Convert.ToInt32(currentId));   
    }

    public async Task CheckIfApplied()
    {
        List<JobApplication> appList = await JobApplicationService.GetJobApplicationsByUser(currentUser.Id);

        foreach(JobApplication app in appList)
        {
            if(app.JobPost == null)
            {
                continue;
            }

            if(app.JobPost.Id == currentJobPost.Id)
            {
                hasApplied = true;
                appIDExist = app.Id;
                break;
            }


        }
    }



    public async Task OnFileUpload(IFileListEntry[] file, string userId)
    {
        var attachment = await FileSender(file.FirstOrDefault());
        UserService.UploadPdf(userId, attachment);
        currentUser = UserService.GetUserById(currentUser.Id);

        resumeStatus = $"Uploaded file: {file.FirstOrDefault().Name}";
        isResumeUploaded = true;
    }

    public async Task OnFileUpload(IFileListEntry[] file)
    {
        coverLetterAttachments = await FileSender(file.FirstOrDefault());
        isCoverLetterUploaded = true;
        coverLetterStatus = $"Uploaded file: {file.FirstOrDefault().Name}";

    }

    public async Task<byte[]> FileSender(IFileListEntry file)
    {
        using (var ms = new MemoryStream())
        {
            await file.Data.CopyToAsync(ms);
            return ms.ToArray();
        }
    }

    public async Task DeletePdf(string userId)
    {
        UserService.DeletePdf(userId);
        currentUser = UserService.GetUserById(currentUser.Id);
        resumeStatus = "File deleted successfully";
        isResumeUploaded = false;
    }

    public async Task DeletePdf()
    {
        coverLetterAttachments = null;
        coverLetterStatus = "File deleted successfully";
        isCoverLetterUploaded = false;
    }

    public async Task DownloadPdf(string userId)
    {
        var user = UserService.GetUserById(userId);

        await FileUtil.SaveAs(JsRuntime, $"Uploaded-Resume-{newJobApplication.Id.ToString()}.pdf", user.Attachment);

        currentUser = UserService.GetUserById(currentUser.Id);
    }

    public async Task DownloadPdf()
    {
        await FileUtil.SaveAs(JsRuntime, $"Uploaded-Cover-Letter-{newJobApplication.Id.ToString()}.pdf", coverLetterAttachments);

    }

    public void SaveData()
    {
        newJobApplication.User = currentUser;
        newJobApplication.JobPost = currentJobPost;
        newJobApplication.ResumeAttachment = currentUser.Attachment;
        if(coverLetterAttachments != null)
        {
            newJobApplication.CoverLetterAttachment = coverLetterAttachments;
        }
        JobApplicationService.CreateApplication(newJobApplication);
        NavigationManager.NavigateTo($"/job/{currentId}/application/{newJobApplication.Id}");
    }


}
