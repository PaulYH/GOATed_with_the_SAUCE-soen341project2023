@page "/jobs"
@using Blazorise
@using DatabaseAccess.Data
@using DatabaseAccess.Entities
@using DatabaseAccess.Enums
@using Microsoft.AspNetCore.Identity
@inject HttpContextAccessor HttpContextAccessor
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject JobPostService JobPostService

<PageTitle>Jobs</PageTitle>
@if(isLoggedIn)
{
<h2>Job Postings</h2>
<DataGrid TItem="JobPost"
          Data="@jobList"
          @bind-SelectedRow="@selectedJob"
          RowSelectable=@((e) => { NavigationManager.NavigateTo($"/job/{e.Item.Id}"); return true; })
          Editable
          Responsive
          ShowPager
          CommandMode="DataGridCommandMode.ButtonRow"
          EditMode="editMode">
    <DataGridColumns>
        <DataGridColumn Field="@nameof(JobPost.Id)" Caption="#Job ID" Sortable="false" />
        <DataGridColumn Field="@nameof(JobPost.JobTitle)" Caption="Job Title" />
        <DataGridColumn Field="@nameof(JobPost.CreationDate)" Caption="Creation Date" />
        <DataGridColumn Field="@nameof(JobPost.ExpirationDate)" Caption="Expiration Date" />
        <DataGridColumn Field="@nameof(JobPost.Location)" Caption="Location" />
        <DataGridColumn Field="@nameof(JobPost.Status)" Caption="Status" />
        <DataGridColumn Field="@nameof(JobPost.JobType)" Caption="Type" />
    </DataGridColumns>

    <ButtonRowTemplate>
        <Button hidden="@(isStudent)" Color="Color.Success" Disabled="(selectedJob is null)" onclick="@(() => {NavigationManager.NavigateTo("/new");})">New</Button>
    </ButtonRowTemplate>
</DataGrid>

}
else
{
    <p>Please log in to access this page</p>
}

@code {
    public ApplicationUser currentUser;
    private List<JobPost> jobList = new List<JobPost> { };
    private JobPost selectedJob = new JobPost();
    private DataGridEditMode editMode = DataGridEditMode.Form;
    public bool isLoggedIn = false;
    public bool isStudent = false;

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUser();

        if (currentUser != null)
        {
            isLoggedIn = true;
            isStudent = (currentUser.Role == RoleType.Student);

            if (currentUser.Role == RoleType.Employer)
            {
                jobList = await JobPostService.GetUserJobPosts(currentUser.Id);
            }
            else
            {
                jobList = await JobPostService.GetAllJobPosts();
            }
        }

        await base.OnInitializedAsync();
    }

    public async Task GetCurrentUser()
    {
        currentUser = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);
    }

}
