@page "/jobs"
@using Blazorise
@using DatabaseAccess.Data
@using DatabaseAccess.Entities
@using DatabaseAccess.Enums
@using Microsoft.AspNetCore.Identity
@inject HttpContextAccessor HttpContextAccessor
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject JobPostService JobPostService

<PageTitle>Jobs</PageTitle>
<h2>Job Postings</h2>
<DataGrid TItem="JobPost"
          Data="@jobList"
          @bind-SelectedRow="@selectedJob"
          Editable
          Responsive
          ShowPager
          CommandMode="DataGridCommandMode.ButtonRow"
          EditMode="editMode">
    <DataGridColumns>
        <DataGridColumn Field="@nameof(JobPost.Id)" Caption="#Job ID" Sortable="false" />
        <DataGridColumn Field="@nameof(JobPost.JobTitle)" Caption="Job Title" />
        <DataGridColumn Field="@nameof(JobPost.CreationDate)" Caption="Creation Date" />
        <DataGridColumn Field="@nameof(JobPost.ExpirationDate)" Caption="Expiration Date" />
        <DataGridColumn Field="@nameof(JobPost.Location)" Caption="Location" />
        <DataGridColumn Field="@nameof(JobPost.Status)" Caption="Status" />
        <!--<DataGridColumn Field="@nameof(JobPost.User.CompanyName)" Caption="Company" /> -->
        <DataGridColumn Field="@nameof(JobPost.JobType)" Caption="Type" />
    </DataGridColumns>

    <ButtonRowTemplate>
        <Button Color="Color.Success" Disabled="(selectedJob is null)" onclick="@(() => {NavigationManager.NavigateTo("/new");})">New</Button>
        <Button Color="Color.Primary" Disabled="true" Clicked="context.EditCommand.Clicked">Edit</Button>
        <Button Color="Color.Danger" Disabled="(selectedJob is null)" hidden="true" Clicked="context.DeleteCommand.Clicked">Delete</Button>
    </ButtonRowTemplate>
</DataGrid>

@code {
    public ApplicationUser currentUser;
    private List<JobPost> jobList = new List<JobPost> { };
    private JobPost selectedJob = new JobPost();
    private DataGridEditMode editMode = DataGridEditMode.Form;
    protected override async Task OnInitializedAsync()
    {
        await GetUser();

        if (currentUser.Role == RoleType.Employer)
        {
            jobList = JobPostService.GetUserJobPosts(currentUser.Id);
        }
        else
        {
            jobList = JobPostService.GetAllJobPosts();
        }

        await base.OnInitializedAsync();
    }

    public async Task GetUser()
    {
        currentUser = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);
    }
}
